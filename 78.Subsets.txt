#https://stackoverflow.com/questions/45681354/generating-all-subsets-of-a-set-using-recursive-backtracking-python

#https://leetcode.com/problems/subsets/discuss/27281/A-general-approach-to-backtracking-questions-in-Java-(Subsets-Permutations-Combination-Sum-Palindrome-Partitioning)

class Solution:
    def subsets(self, nums: List[int]) -> List[List[int]]:
        res=[]
        self.backtrack(res,[],nums,0)
        return res
    
    def backtrack(self,res,subset,nums,start):
        res.append(subset[:])
        for i in range(start,len(nums)):
            subset.append(nums[i])
            self.backtrack(res,subset,nums,i+1)
            subset.pop()