#I have an alternative proof:

# We starts with the widest container, l = 0 and r = n - 1. Let's say the left one is shorter: h[l] < h[r]. Then, this is already the largest container the left one can possibly form. There's no need to consider it again. Therefore, we just throw it away and start again with l = 1 and r = n -1.

class Solution:
    def maxArea(self, height: List[int]) -> int:
        l=0
        r=len(height)-1
        maxValue=0
        while l<r:
            minHeight=min(height[l],height[r])
            maxValue=max(maxValue,(r-l)*minHeight)
            if height[l]<height[r]:
                l+=1
            else:
                r-=1
        return maxValue